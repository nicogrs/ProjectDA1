@page "/{teamName}/{panelId}/createEpic"
@using Dominio
@using Interfaces
@using Task = Dominio.Task
@inject IPanelService PlService
@inject IEpicService EpicService
@inject NavigationManager Navigation
@inject Session Session

<PageTitle>Create Epic</PageTitle>
<h3>Crear Epica</h3>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success" role="alert">
        @message
    </div>
}
<EditForm Model="modelCreateEpic" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator/>
    <div class="d-flex justify-content-center align-items-center">
        <div class="w-50">
        <div class="form-group mt-4">
            <label id="name">Nombre</label>
            <InputText required class="form-control" @bind-Value="@modelCreateEpic.Name" id="name"></InputText>
            <ValidationMessage For="@(() => modelCreateEpic.Name)"/>
        </div>
        <div class="form-group mt-4">
            <label id="priority">Prioridad</label>
            <select class="form-control" Value="@selectedPriority" id="priority">
                @foreach (var priority in Enum.GetValues(typeof(Task.Priority)))
                {
                    <option value="@priority">@priority.ToString()</option>
                }
            </select>
            <ValidationMessage For="@(() => modelCreateEpic.Priority)"/>
        </div>
        <div class="form-group mt-4">
            <label for="description">Descripcion</label>
            <InputText class="form-control" @bind-Value="@modelCreateEpic.Description" required id="description"></InputText>
            <ValidationMessage For="@(() => modelCreateEpic.Description)"/>
        </div>

        <div class="form-group mt-4">
            <label for="birthDate">Fecha de expiración</label>
            <InputDate class="form-control" id="birthDate" @bind-Value="@modelCreateEpic.ExpirationDate" required min="@DateTime.Today.AddDays(1)"></InputDate>
            <ValidationMessage For="@(() => modelCreateEpic.ExpirationDate)"/>
        </div>
        <div class="form-group mt-4">
            <button class="btn btn-primary" type="submit">Crear Epica</button>
        </div>
        </div>
    </div>
</EditForm>
<div class="col-4 mt-4">
    <button class="btn btn-primary" type="submit" @onclick="GoBack">Volver</button>
</div>
@code {
    [Parameter]
    public string teamName { get; set; }
    [Parameter]
    public string panelId { get; set; }

    private Epic.Precedence selectedPriority;
    
    Epic modelCreateEpic = new Epic();
    private string message;
    
    protected override void OnInitialized()
    {
        if (Session.CurrentUser == null)
        {
            Navigation.NavigateTo("/error");
        }
        else
        {
            modelCreateEpic.ExpirationDate = DateTime.Now;
        }
    }
    
    
    private void HandleCreate()
    {
        if(!string.IsNullOrEmpty(modelCreateEpic.Name) && modelCreateEpic.ExpirationDate != null){
            if (modelCreateEpic.ExpirationDate.Date <= DateTime.Today.Date)
            {
                message = "La epica debe expirar en al menos un dia.";
                return;
            }
            Epic epic = new Epic()
            {
                Name = modelCreateEpic.Name,
                Priority = selectedPriority,
                Description = modelCreateEpic.Description,
                ExpirationDate = modelCreateEpic.ExpirationDate,
                FromPanel = PlService.GetPanelById(int.Parse(panelId))
            };
            EpicService.CreateEpic(epic);
           // PlService.GetPanelById(int.Parse(panelId)).AddTask(t);
            message="Epica creada con éxito";
            ClearContents();
        }

    } 
    
    private void GoBack()
    {
        Navigation.NavigateTo($"/{teamName}/{panelId}/tasks");
    }

    private void ClearContents()
    {
        modelCreateEpic.Name = "";
        modelCreateEpic.Priority = Epic.Precedence.Low;
        modelCreateEpic.Description = "";
        modelCreateEpic.ExpirationDate = DateTime.Now;
    }
}