@page "/{teamName}/{panelId}/create"
@using Interfaces
@using Task = Dominio.Task
@inject IPanelService PlService
@inject NavigationManager Navigation
@inject Session Session

<PageTitle>Create Task</PageTitle>
<h3>Crear Tarea</h3>
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-success" role="alert">
        @message
    </div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
<div class="alert alert-danger" role="alert">
    @message
</div>
}
<EditForm Model="modelCreateTask" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator/>
    <div class="d-flex justify-content-center align-items-center">
        <div class="w-50">
            <div class="form-group mt-4">
                <label id="name">Nombre</label>
                <InputText required class="form-control" @bind-Value="@modelCreateTask.Name" id="name"></InputText>
                <ValidationMessage For="@(() => modelCreateTask.Name)"/>
            </div>
            <div class="form-group mt-4">
                <label id="priority">Prioridad</label>
                <select class="form-control" Value="@selectedPriority" id="priority">
                    @foreach (var priority in Enum.GetValues(typeof(Task.Priority)))
                    {
                        <option value="@priority">@priority.ToString()</option>
                    }
                </select>
                <ValidationMessage For="@(() => modelCreateTask.Precedence)"/>
            </div>
            <div class="form-group mt-4">
                <label for="description">Descripcion</label>
                <InputText class="form-control" @bind-Value="@modelCreateTask.Description" required id="description"></InputText>
                <ValidationMessage For="@(() => modelCreateTask.Description)"/>
            </div>

            <div class="form-group mt-4">
                <label for="birthDate">Fecha de expiración</label>
                <InputDate class="form-control" id="birthDate" @bind-Value="@modelCreateTask.ExpirationDate" required min="@DateTime.Today.AddDays(1)"></InputDate>
                <ValidationMessage For="@(() => modelCreateTask.ExpirationDate)"/>
            </div>
            
            <div class="form-group mt-4">
                <label for="birthDate">Esfuerzo estimado</label>
                <InputNumber class="form-control" id="birthDate" @bind-Value="@modelCreateTask.ExpectedEffort" required min="1"></InputNumber>
                <ValidationMessage For="@(() => modelCreateTask.ExpectedEffort)"/>
            </div>
            <div class="form-group mt-4">
                <button class="btn btn-primary" type="submit">Crear Tarea</button>
            </div>
        </div>
    </div>
</EditForm>
<div class="col-4 mt-4">
    <button class="btn btn-primary" type="submit" @onclick="GoBack">Volver</button>
</div>
@code {
    [Parameter]
    public string teamName { get; set; }
    [Parameter]
    public string panelId { get; set; }

    private Task.Priority selectedPriority;
    
    Task modelCreateTask = new Task();
    private string message;
    private string errorMessage;
    
    protected override void OnInitialized()
    {
        if (Session.CurrentUser == null)
        {
            Navigation.NavigateTo("/error");
        }
        else
        {
            modelCreateTask.ExpirationDate = DateTime.Now;
        }
    }
    
    
    private void HandleCreate()
    {
        if(!string.IsNullOrEmpty(modelCreateTask.Name) && modelCreateTask.ExpirationDate != null){
            if (modelCreateTask.ExpirationDate.Date <= DateTime.Today.Date)
            {
                errorMessage = "La tarea debe expirar en al menos un dia.";
                return;
            }
            Task t = new Task
            {
                Name = modelCreateTask.Name,
                Precedence = selectedPriority,
                Description = modelCreateTask.Description,
                ExpirationDate = modelCreateTask.ExpirationDate,
                ExpectedEffort = modelCreateTask.ExpectedEffort,
                Ended = false
                //Epic = null
            };
            PlService.AddTaskToPanel(int.Parse(panelId), t);
            message="Tarea creada con éxito";
            ClearContents();
        }

    } 
    
    private void GoBack()
    {
        Navigation.NavigateTo($"/{teamName}/{panelId}/tasks");
    }

    private void ClearContents()
    {
        modelCreateTask.Name = "";
        modelCreateTask.Precedence = Task.Priority.Low;
        modelCreateTask.Description = "";
        modelCreateTask.ExpirationDate = DateTime.Now;
    }
}