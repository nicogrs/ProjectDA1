
@using Dominio
@using Interfaces
@using Services
@inject IPanelService PlService
@inject ITaskService TkService
@inject IUserService UService
@inject IEpicService Epicservice
@inject NavigationManager Navigation
@inject Session Session

<div class="d-flex justify-content-center align-items-center">
    <div class="w-75">
        <div class="card epic-card my-3">
            @if (EpicPriority == Epic.Precedence.Low)
            {
            <div class="card-header bg-danger">
                <h5 class="text-white mb-0">EPICA: @EpicName</h5>
            </div>
            }
            else if (EpicPriority == Epic.Precedence.Medium)
            {
            <div class="card-header bg-info">
                <h5 class="text-white mb-0">EPICA: @EpicName</h5>
            </div>
            }
            else
            {
            <div class="card-header bg-black">
                <h5 class="text-white mb-0">EPICA: @EpicName</h5>
            </div>
            }

            <div class="card-body">
                <p class="card-text text-muted">Descripción:</p>
                <p class="card-text">@EpicDescription</p>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <span class="badge bg-secondary">Prioridad: @EpicPriority.ToString()</span>
                    <span class="badge bg-info">Vence: @EpicEndDate.ToShortDateString()</span>
                </div>
            </div>

            <div class="card-footer text-end">
                <button class="btn btn-secondary me-2" type="submit" >Agregar Tareas</button>
                <button class="btn btn-warning me-2" type="submit" @onclick="ChangeEpic">Modificar</button>
                <button class="btn btn-danger me-2" type="submit" @onclick="ShowModal">Eliminar</button>
            </div>
        </div>
    </div>
</div>


@if (isModalVisible)
{
<div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Eliminación</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            @if (UService.GetUserByEmail(Session.CurrentUser.Email).PaperBin.ElementsCount < 10)
            {
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas enviar la tarea <strong>@EpicName
                        </strong> a la papelera?</p>
                </div>     
            }
            else
            {
                <div class="modal-body">
                    <p>¡Tu papelera esta llena! ¿Estas seguro que quieres eliminar <strong>@EpicName
                        por completo?</strong></p>
                </div>    
            }

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Confirmar</button>
            </div>
        </div>
    </div>
</div>
}

@code {
    [Parameter] public int EpicId { get; set; }
    [Parameter] public string EpicName { get; set; }
    [Parameter] public Epic.Precedence EpicPriority { get; set; }
    [Parameter] public DateTime EpicEndDate { get; set; }
    [Parameter] public string EpicDescription { get; set; }
    [Parameter] public string EpicTeamName { get; set; }
    [Parameter] public string EpicPanelId { get; set; }
    [Parameter] public EventCallback EpicOnTaskDeleted { get; set; }
    
    private bool isModalVisible;
    private string messageNotSuccess;
    

    protected override void OnInitialized()
    {
    }
    
    private void ChangeEpic()
    {
        Navigation.NavigateTo($"/{EpicTeamName}/{EpicPanelId}/{EpicId}");
    }
    
    
    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private void ConfirmDelete()
    {
        CloseModal();
        EpicOnTaskDeleted.InvokeAsync();
    }
    
}