@using Dominio
@using Interfaces
@using Services
@using Task = Dominio.Task
@inject PanelService PlService
@inject TaskService TkService
@inject IUserService UService
@inject NavigationManager Navigation
@inject Session Session

<div class="card mb-2 mt-4">
    <div>
        @if (Precedence == Task.Priority.Urgent)
        {
        <div class="bg-danger card-header ">
            <p class="card-title text-white w-100">@Title</p>
        </div>
        }
        else if (Precedence == Task.Priority.Medium)
        { 
            <div class="bg-info card-header">
                <p class="card-title bg-info text-white">@Title</p>
            </div>
        }
        else
        {
        <div class="bg-black card-header">
            <p class="card-title bg-black text-white">@Title</p>
        </div>
        }
    </div>
    <div class="card-body">
        <div class="d-flex justify-content-between">
            <p class="card-text">Prioridad: @Precedence.ToString()</p>
            <p class="card-text">Vencimiento: @EndDate</p>
            <p class="card-text">Esfuerzo Invertido: @InvertedEffort</p>
        </div>
        <div class="border-top-2">
            <p class="card-text">Descripcion de la tarea:<br/> @Description</p>
        </div>
        @if (Comments != null && Comments.Count > 0)
        {
            <div>
                <p class="card-text border-top-2 mt-2 mb-2">Comentarios:</p>
            </div>
            foreach (var comment in Comments)
            {
                <div class="card-text border-bottom mb-2 pb-2">
         
                    @if (comment.Resolved)
                    {
                        <s>@comment.Content - Resuelto por @comment.ResolvedBy.Email el @comment.ResolvedTime.ToString()</s>
                    }
                    else
                    {
                        <p>@comment.CreatedBy.Name @comment.CreatedBy.Surname Respondio: <br/> @comment.Content</p>
                    }
                    @if (!comment.Resolved)
                    {
                        <div class="form-group">
                            <button class="btn btn-primary" type="submit" 
                                    @onclick="() => CompleteComment(comment)">Terminar</button>
                        </div>
                    }
                </div>
            }
        }
    </div>
    <div class="card-footer">
        <div class="d-flex">
            @if (!Ended)
            {
                <div class="form-group m-2">
                    <button class="btn btn-primary" type="submit" @onclick="AddComment">Agregar Comentario</button>
                </div>
                <div class="form-group m-2">
                    <button class="btn btn-warning" type="submit" @onclick="ChangeTask">Modificar</button>
                </div>
                <div class="form-group m-2">
                    <button class="btn btn-warning" type="submit" @onclick="EndTask">Terminar Tarea</button>
                </div>
            }
            <div class="form-group m-2">
                <button class="btn btn-warning" type="submit" @onclick="ComparativeGraphic">Grafico de esfuerzo</button>
            </div>
            <div class="form-group m-2">
                <button class="btn btn-danger" type="submit" @onclick="ShowModal">Eliminar</button>
            </div>
        </div>
    </div>
</div>


@if (isModalVisible)
{
<div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmar Eliminación</h5>
                <button type="button" class="close" @onclick="CloseModal">
                    <span>&times;</span>
                </button>
            </div>
            @if (UService.GetUserByEmail(Session.CurrentUser.Email).PaperBin.ElementsCount < 10)
            {
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas enviar la tarea <strong>@selectedTask.Name
                        </strong> a la papelera?</p>
                </div>     
            }
            else
            {
                <div class="modal-body">
                    <p>¡Tu papelera esta llena! ¿Estas seguro que quieres eliminar <strong>@selectedTask.Name
                        por completo?</strong></p>
                </div>    
            }
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Confirmar</button>
            </div>
        </div>
    </div>
</div>
}

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public Task.Priority Precedence { get; set; }
    [Parameter]
    public DateTime EndDate { get; set; }
    [Parameter]
    public string Description { get; set; }
    [Parameter]
    public string InvertedEffort { get; set; }
    [Parameter]
    public int TaskId { get; set; }
    [Parameter]
    public bool Ended { get; set; }
    
    [Parameter]
    public string teamName { get; set; }
    [Parameter]
    public string panelId { get; set; }
    [Parameter]
    public EventCallback OnTaskDeleted { get; set; }
    [Parameter]
    public List<Comment> Comments { get; set; }
    
    private Task selectedTask;
    private bool isModalVisible;
    private string messageNotSuccess;
    

    protected override void OnInitialized()
    {
        selectedTask = TkService.GetTaskById(TaskId);
        Comments = TkService.GetCommentsFromTask(TaskId);
        Ended = selectedTask.Ended;
    }

    private void AddComment()
    {
        Navigation.NavigateTo($"/{teamName}/{panelId}/{TaskId}/createComment");
    }
    private void ChangeTask()
    {
        Navigation.NavigateTo($"/{teamName}/{panelId}/{Title}");
    }

    private void EndTask()
    {
        TkService.ChangeStatus(TaskId);
        selectedTask = TkService.GetTaskById(TaskId);
        Ended = selectedTask.Ended;
        StateHasChanged();
    }

    private void ComparativeGraphic()
    {
        Navigation.NavigateTo($"/{teamName}/{panelId}/{TaskId}/graphic");
    }
    
    
    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private void ConfirmDelete()
    {
        UService.AddElementToPaperBin(Session.CurrentUser.Email, selectedTask as IDeleteable);
        CloseModal();
        OnTaskDeleted.InvokeAsync();
    }

    private void CompleteComment(Comment comment)
    {
        Panel panel = PlService.GetPanelById(int.Parse(panelId));
        panel.Tasks.Find(t => t.Name.Equals(Title)).MarkCommentAsResolved(Session.CurrentUser, comment);
    }
}