@page "/{teamName}/{panelId}/TaskImportService"
@using Dominio;
@using Task = Dominio.Task
@inject NavigationManager Navigation;
@inject Session Session;
@inject PanelService PlService;

<PageTitle>Importar Tasks</PageTitle>

<h4>Importar Tareas</h4>
<h3>Importar desde .csv</h3>
<InputFile Texto ref="csvInputFile" OnChange="HandleCsvFileSelected" accept=".csv" style="display: none" />
<h3>Importar desde .csv</h3>
<InputFile ref="xlsxInputFile" OnChange="HandleXlsxFileSelected" accept=".xlsx" style="display: none" />



@if (fileContent != null)
{
    <p>Archivo cargado.</p>
}

@if (!string.IsNullOrEmpty(message))
{
<div class="alert" role="alert">
    @message
</div>
}

@if (tasks != null && tasks.Any())
{
<table class="table table-bordered">
    <thead>
    <tr>
        <th>Agregar Tarea?</th>
        <th>Titulo</th>
        <th>Descripcion</th>
        <th>Fecha de vencimiento</th>
        <th>Épica</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Task task in tasks)
    {
    <tr>
        <td>
            <input type="checkbox" @onchange="e => ToggleSelection(task, e.Value)"/>
        </td>
        <td>@task.Title</td>
        <td>@task.Description</td>
        <td>@expDateToString(task.ExpirationDate)</td>
        @if (task.Epic != null)
            {<td>@task.Epic;</td>}
        else
            {<td>Sin épica.;</td>}
    </tr>
    }
    </tbody>
</table>

@if (SelectedTasks.Count > 0)
{
    <h4>Tareas seleccionadas: (@SelectedTasks.Count)</h4>
    <ul>
        @foreach (Task task in SelectedTasks)
        {
            <li>@task.Title (@task.Description)</li>
        }
    </ul>
}

<button class="btn btn-primary" @onclick="GetSelectedTasks">Agregar tareas a panel</button>
}

<div class="col-4 mb-4">
    <button class="btn btn-primary" type="submit" @onclick="GoToPanel">Volver</button>
</div>

@code {
    [Parameter]
    public string teamName { get; set; }
    [Parameter]
    public string panelId { get; set; }
    
    private IBrowserFile? selectedFile;
    private string? fileContent;
    private List<Task> tasks;
    private HashSet<Task> SelectedTasks = new HashSet<Task>();
    private Panel panel;
    private string message;
    
    
    protected override void OnInitialized()
    {
        if (Session.CurrentUser == null || Session.IsAdmin)
        {
            Navigation.NavigateTo("/error");
        }
    }
    
    
    private async System.Threading.Tasks.Task HandleCsvFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        
        ProcessCsvFile(selectedFile);
    }
    
    private async System.Threading.Tasks.Task HandleXlsxFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        
        ProcessXlsxFile(selectedFile);
    }
    
    
    private void ProcessCsvFile(IBrowserFile file)
    {
        contentFromCsvFile(file,fileContent);

        Dominio.Services.CsvReader csvReader = new Dominio.Services.CsvReader();
        
        tasks = csvReader.ReadTasksFromContent(fileContent,Session.CurrentUser);
        
        StateHasChanged();
    }
    
    private void ProcessXlsxFile(IBrowserFile file)
    {
        Dominio.Services.XlsReader xlsReader = new Dominio.Services.XlsReader();

        //string fileContent = xlsReader.ConvertXlsFileContentToCsv(file);

        Dominio.Services.CsvReader csvReader = new Dominio.Services.CsvReader();
        
        tasks = csvReader.ReadTasksFromContent(fileContent,Session.CurrentUser);
        
        StateHasChanged();
    }

    public async void contentFromCsvFile(IBrowserFile file, string @destinationFile)
    {
        if (selectedFile == null)
        {
            destinationFile = "";
            return;
        }
        
        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream);
        fileContent = await reader.ReadToEndAsync();

        destinationFile = fileContent;
    }

    private string expDateToString(DateTime dt)
    {
        return $"{dt.Year}/{dt.Month}/{dt.Day}";
    }

    private void ToggleSelection(Task task, object isSelected)
    {
        bool selected = (bool)isSelected;
        if (selected)
        {
            SelectedTasks.Add(task);
        }
        else
        {
            SelectedTasks.Remove(task);
        }
    }
    
    private void GetSelectedTasks()
    {
        panel = PlService.GetPanelById(teamName,int.Parse(panelId));

        foreach (Task task in SelectedTasks)
        {
            panel.AddTask(task);
        }
        
        message=$"{SelectedTasks.Count} Tareas agregadas exitosamente a {panel.Name}.";
        fileContent = "";
        tasks = null;
    }

    private void GoToPanel()
    {
        Navigation.NavigateTo($"/{teamName}/panel");
    }
}
