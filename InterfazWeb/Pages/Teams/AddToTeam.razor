@page "/teams/add"
@using Dominio
@using Dominio.Data
@inject TeamDataBase TDatabase
@inject UserDataBase UDatabase
@inject TeamService TmService
@inject NavigationManager Navigation
@inject Session Session

<PageTitle>Add to Team</PageTitle>
<h3>Agregar Usuario a Equipo</h3>
<EditForm Model="modelAddToTeam" OnValidSubmit="HandleAdd">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label for="releaseYear">Equipo</label>
        <InputSelect @bind-Value="selectedTeamName" @onchange="OnChangeTeam">
            <option value="0" disabled>
                Ninguna seleccionada
            </option>
            @foreach (var team in Teams)
            {
            <option value="@team.Name">@team.Name </option>
            }
        </InputSelect>
    </div>
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="multiSelectDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            Selecciona Usuarios
        </button>
        <ul class="dropdown-menu" aria-labelledby="multiSelectDropdown">
            @foreach (var user in Users)
            {
                <li class="dropdown-item">
                    <input type="checkbox" @onchange="(e) => ToggleUserSelection(user.Email, e.Value)" /> @user.Email
                </li>
            }
        </ul>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" type="submit">AÃ±adir Usuario</button>
    </div>
    <div class="col-4">
        <button class="btn btn-primary" type="submit" @onclick="GoBack">Volver</button>
    </div>
    <div class="alert alert-danger" role="alert">
        @CreateMessage
    </div>
</EditForm>

@code {
    Team modelAddToTeam = new Team();
    string selectedTeamName = "";
    private List<Team> Teams;
    private List<User> Users;
    private string CreateMessage;
    public List<User> SelectedUser;

    protected override void OnInitialized()
    {
        if (!Session.IsAdmin)
        {
            Navigation.NavigateTo("/error");
        }

        Teams = TDatabase.Teams;
        Users = UDatabase.GetUsers();
        SelectedUser = new List<User>();
    }

    private void OnChangeTeam(ChangeEventArgs e)
    {
        string team = e.Value.ToString();
        modelAddToTeam.Name = TDatabase.Teams.FirstOrDefault(t => t.Name.Equals(team)).Name;
    }

    private void ToggleUserSelection(string email, object isSelected)
    {
        if ((bool)isSelected)
        {
            SelectedUser.Add(UDatabase.GetUserByEmail(email));
        }
    }

    private void HandleAdd()
    {
        string existingTeam = modelAddToTeam.Name;

        if (existingTeam != null && SelectedUser != null)
        {
            foreach (var u in SelectedUser)
            {
                string addUser = u.Name;
                TmService.AddUserToTeam(existingTeam, addUser);
            }
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/account/teams");
    }
}