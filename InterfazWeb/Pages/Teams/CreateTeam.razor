@page "/teams/create"
@using Dominio
@using Dominio.Data
@inject UserDataBase UDatabase
@inject TeamService TmService
@inject UserService UService
@inject NavigationManager Navigation
@inject Session Session


<PageTitle>CreateTeam</PageTitle>
<h3>Agregar Equipo</h3>
@if (!string.IsNullOrEmpty(messageSuccess))
{
    <div class="alert alert-success" role="alert">
        @messageSuccess
    </div>
}
@if (!string.IsNullOrEmpty(messageNotSuccess))
{
    <div class="alert alert-danger" role="alert">
        @messageNotSuccess
    </div>
}
<EditForm Model="modelCreateTeam" OnValidSubmit="HandleCreate">
    <DataAnnotationsValidator/>
    <div class="form-group">
        <label id="name">Nombre</label>
        <InputText class="form-control" @bind-Value="@modelCreateTeam.Name" id="name"></InputText>
        <ValidationMessage For="@(() => modelCreateTeam.Name)"/>
    </div>
    <div class="form-group">
        <label id="userAmount">Cantidad de Usuarios</label>
        <InputNumber class="form-control" @bind-Value="@modelCreateTeam.MaxUsers" id="userAmount"></InputNumber>
        <ValidationMessage For="@(() => modelCreateTeam.MaxUsers)"/>
    </div>
    <div class="dropdown">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="multiSelectDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            Selecciona Usuarios
        </button>
        <ul class="dropdown-menu" aria-labelledby="multiSelectDropdown">
            @foreach (var user in users)
            {
                <li class="dropdown-item">
                    <input type="checkbox" @onchange="(e) => ToggleUserSelection(user.Email, e.Value)" /> @user.Email
                </li>
            }
        </ul>
    </div>
    <div class="form-group">
        <button class="btn btn-primary" type="submit">Crear Grupo</button>
    </div>
    <div class="col-4">
        <button class="btn btn-primary" type="submit" @onclick="GoBack">Volver</button>
    </div>
</EditForm>

@code{
    Team modelCreateTeam = new Team();
    private List<User> users;
    private string messageSuccess;
    private string messageNotSuccess;
    public List<User> SelectedUser;
    private Panel p;
    public List<Panel> panels;
    private bool created;
    
    protected override void OnInitialized()
    {
        if (!Session.IsAdmin)
        {
            Navigation.NavigateTo("/error");
        }
        users = UDatabase.GetUsers();
        SelectedUser = new List<User> { Session.CurrentUser };
    }
    private void ToggleUserSelection(string email, object isSelected)
    {
        if ((bool)isSelected)
        {
            SelectedUser.Add(UService.GetUserByEmail(email));
        }
    }
    
    private void HandleCreate()
    {
        
        Team t = new Team
        {
            Name = modelCreateTeam.Name,
            CreatedOn = DateTime.Now,
            TeamMembers = SelectedUser,
            TasksDescription = " ",
            Panels = new List<Panel>(),  
            MaxUsers = modelCreateTeam.MaxUsers
        };
        created = TmService.CreateTeam(t);
        if (created)
        {
            messageSuccess = "Equipo creado con Ã©xito.";
        }
        else
        {
            if (TmService.TeamExists(t.Name))
            {
                messageNotSuccess="El equipo no fue creado, ya existe uno con el mismo nombre.";
            }
            
        }

    }
    private void GoBack()
    {
        Navigation.NavigateTo("/account/teams");
    }
}