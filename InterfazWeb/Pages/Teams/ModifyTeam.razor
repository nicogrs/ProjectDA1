@page "/{teamName}/modify"
@using Dominio
@using Dominio.Data

@inject TeamDataBase TDatabase
@inject UserDataBase UDatabase
@inject TeamService TmService
@inject NavigationManager Navigation
@inject Session Session

<PageTitle>ModifyTeam</PageTitle>
<h3>Modificar Equipo</h3>


<EditForm Model="modelChangeTeam" OnValidSubmit="HandleModify">
        <DataAnnotationsValidator/>
        <div class="form-group">
            <label id="name">Descripcion de tareas</label>
            <InputText class="form-control" @bind-Value="@modelChangeTeam.TasksDescription" id="name"></InputText>
            <ValidationMessage For="@(() => modelChangeTeam.TasksDescription)"/>
        </div>
    
        <div class="form-group">
            <label for="lastName">Cantidad maxima de usuarios</label>
            <InputNumber class="form-control" @bind-Value="@modelChangeTeam.MaxUsers" id="lastName"></InputNumber>
            <ValidationMessage For="@(() => modelChangeTeam.MaxUsers)"/>
        </div>
        
        <div class="mt-2">
            <div class="form-group">
                <button class="btn btn-primary" type="submit">Modificar Equipo</button>
            </div>
            <div class="col-4">
                <button class="btn btn-primary" type="button" @onclick="ModifyUsers">Modificar Usuarios</button>
            </div>
            <div class="col-4">
                <button class="btn btn-primary" type="button" @onclick="GoBack">Volver</button>
            </div>
        </div>
        
    </EditForm>


@code {
    [Parameter]
    public string teamName { get; set; }
    
    Team modelChangeTeam = new Team();
    
    private List<User> Users;
    private string modifyMessage;
    private string selectedUser = "";
    private bool showConfirmation = false;
    private string newPassword;
    private PasswordService passwordService = new PasswordService();


    protected override void OnInitialized()
    {
        if (!Session.IsAdmin)
        {
            Navigation.NavigateTo("/error");
        }
        Users = UDatabase.GetUsers();
    }
    
    /*private void OnChangeUser(ChangeEventArgs e)
    {
        string userEmail = e.Value.ToString();
        modelModifyUser = UDatabase.GetUsers().FirstOrDefault(u => u.Email.Equals(userEmail));
    }
    private void GeneratePassword()
    {
        newPassword = passwordService.GenerateRandomPassword();
        modelChangeTeam.Password = newPassword;
    }

    private void ShowModify()
    {
        showConfirmation = true;
    }

    private void HandleUpdate()
    {
        User modifyUser = UDatabase.GetUserByEmail(modelModifyUser.Email);
        
        UserModifyDTO u = new UserModifyDTO
        {
            Name = modifyUser.Name,
            Surname = modifyUser.Surname,
            BirthDate = modifyUser.BirthDate,
            Password = modifyUser.Password,
            Email = modelModifyUser.Email
        };
        
        if (modelChangeTeam.Name != null)
        {
            u.Name = modelChangeTeam.Name;
        }
    
        if (modelChangeTeam.Surname != null)
        {
            u.Surname = modelChangeTeam.Surname;
        }

        if (modelChangeTeam.BirthDate != default(DateTime))
        {
            u.BirthDate = modelChangeTeam.BirthDate;
        }
        
        if (modelChangeTeam.Password != null)
        {
            u.Password = modelChangeTeam.Password;
        }
        
        UDatabase.UpdateUser(u.ToEntity());
        showConfirmation = false;
        modifyMessage = "Usuario modificado.";
        
    }*/

    private void HandleModify()
    {
        
    }

    private void ModifyUsers()
    {
        Navigation.NavigateTo($"/{teamName}/modifyUsers");
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/{teamName}/panel");
    }
}