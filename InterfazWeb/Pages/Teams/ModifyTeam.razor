@page "/{teamName}/modify"
@using System.Reflection.Metadata
@using Dominio
@using Dominio.Data
@inject ITeamService TmService
@inject NavigationManager Navigation
@inject Session Session

<PageTitle>ModifyTeam</PageTitle>
<h3 class="mb-4">Modificar Equipo</h3>
@if (selectedTeam != null)
{
<div class="row">
    <div class="col-4 mb-4">
        <button class="btn btn-primary" type="button" @onclick="ModifyUsers">Modificar Usuarios</button>
    </div>
</div>

<EditForm Model="modelChangeTeam" OnValidSubmit="HandleModify">
    <DataAnnotationsValidator/>
    <div class="d-flex justify-content-center align-items-center">
        <div class="w-50">
        <div class="form-group mb-4">
            <label id="name">Descripcion de tareas</label>
            <InputText class="form-control" @bind-Value="@modelChangeTeam.TasksDescription" id="name"></InputText>
            <ValidationMessage For="@(() => modelChangeTeam.TasksDescription)"/>
        </div>

        <div class="form-group mb-4">
            <label for="lastName">Cantidad maxima de usuarios</label>
            <InputNumber class="form-control" min="1" @bind-Value="@modelChangeTeam.MaxUsers" id="lastName"></InputNumber>
            <ValidationMessage For="@(() => modelChangeTeam.MaxUsers)"/>
        </div>

        <div class="mt-2 mb-4">
            <div class="form-group">
                <button class="btn btn-primary" type="submit">Modificar Equipo</button>
            </div>
        </div>

        <div class="col-4">
            <button class="btn btn-secondary" type="button" @onclick="GoBack">Volver</button>
        </div>
        </div>
    </div>
</EditForm>
}

@if (!string.IsNullOrEmpty(modifyMessageSucess))
    {
        <div class="alert alert-success mt-4" role="alert">
            @modifyMessageSucess
        </div>
    }
@if (!string.IsNullOrEmpty(modifyMessageError))
{
<div class="alert alert-danger mt-4" role="alert">
    @modifyMessageError
</div>
}


@code {
    [Parameter]
    public string teamName { get; set; }
    
    Team modelChangeTeam = new Team();
    Team selectedTeam;
    
    private string modifyMessageSucess;
    private string modifyMessageError;
    private string selectedUser = "";
    private bool showConfirmation = false;
    private string newPassword;

    protected override void OnInitialized()
    {
        if (!Session.IsAdmin)
        {
            Navigation.NavigateTo("/error");
        }
        selectedTeam = TmService.GetTeamByName(teamName);
        if (selectedTeam == null)
        {
            modifyMessageError = "Equipo no encontrado";
        }

        modelChangeTeam.MaxUsers = selectedTeam.MaxUsers;
        modelChangeTeam.TasksDescription = selectedTeam.TasksDescription;
    }
    
    private void HandleModify()
    {
        if (selectedTeam.TeamMembers.Count > modelChangeTeam.MaxUsers)
        {
            modifyMessageError = "El equipo tiene mas miembros que la nueva cantidad maxima, " +
                                 "elegir un numero mayor o quitar usuarios del equipo.";
            return;
        }
        
        Team newTeam = new Team
        {
            TasksDescription = modelChangeTeam.TasksDescription,
            MaxUsers = modelChangeTeam.MaxUsers
        };
        var modified = TmService.UpdateTeam(selectedTeam.Name, newTeam);
        Console.WriteLine(modified);
        if (modified)
        {
            modifyMessageSucess = "Equipo modificado correctamente";
            modifyMessageError = "";
        }
        else
        {
            modifyMessageError = "El equipo no pudo ser modificado";
            modifyMessageSucess = "";
        }

    }

    private void ModifyUsers()
    {
        Navigation.NavigateTo($"/{teamName}/modifyUsers");
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/account/teams");
    }
}